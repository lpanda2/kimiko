[{"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/index.tsx":"1","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Layouts/Admin.tsx":"2","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Layouts/Auth.tsx":"3","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Routes.ts":"4","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Dashboard.tsx":"5","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Components/Page404.tsx":"6","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/auth.js":"7","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/serverauth.js":"8","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/getPatientData.js":"9","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/Statistics.js":"10","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/WelcomeMenu.js":"11","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimsChart.js":"12","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimsTable.js":"13","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimSpendStackedBarChart.js":"14","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/utilities.js":"15","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/EmptyCard.js":"16"},{"size":598,"mtime":1626820258589,"results":"17","hashOfConfig":"18"},{"size":3162,"mtime":1626822181523,"results":"19","hashOfConfig":"18"},{"size":1088,"mtime":1626779313897,"results":"20","hashOfConfig":"18"},{"size":624,"mtime":1626779691827,"results":"21","hashOfConfig":"18"},{"size":2118,"mtime":1626833175477,"results":"22","hashOfConfig":"18"},{"size":490,"mtime":1626779652369,"results":"23","hashOfConfig":"18"},{"size":3456,"mtime":1626786022759,"results":"24","hashOfConfig":"18"},{"size":532,"mtime":1626784699501,"results":"25","hashOfConfig":"18"},{"size":5893,"mtime":1626818630052,"results":"26","hashOfConfig":"18"},{"size":1152,"mtime":1626832442899,"results":"27","hashOfConfig":"18"},{"size":322,"mtime":1626821322053,"results":"28","hashOfConfig":"18"},{"size":337,"mtime":1626829036179,"results":"29","hashOfConfig":"18"},{"size":2344,"mtime":1626831407513,"results":"30","hashOfConfig":"18"},{"size":4760,"mtime":1626829703084,"results":"31","hashOfConfig":"18"},{"size":1323,"mtime":1626833142598,"results":"32","hashOfConfig":"18"},{"size":252,"mtime":1626828778996,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"18qlrhg",{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/index.tsx",[],[],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Layouts/Admin.tsx",["78","79","80","81"],"import React, { Component } from 'react'\r\nimport { \r\n    Layout\r\n} from 'antd';\r\nimport { Route, Switch, RouteComponentProps, Redirect } from \"react-router-dom\";\r\nimport Routes from \"../Routes\";\r\nimport { RouteType } from '../Models';\r\nconst { Content } = Layout;\r\n\r\nexport default class AdminLayout extends Component<RouteComponentProps> {\r\n    state = {\r\n        collapsed: false,\r\n    };\r\n\r\n    getRoutes = (layoutRoutes: RouteType[]): null | any => {\r\n        return layoutRoutes.map((prop, key) => {\r\n            // if a route doesn't have any subMenu and its layout is admin\r\n            const propPath = prop.layout + prop.path;\r\n            if (prop.layout === \"/admin\" && !prop.subMenu) {\r\n                return (\r\n                    <Route\r\n                        exact\r\n                        path={propPath}\r\n                        component={(): JSX.Element => <prop.component />}\r\n                        key={key}\r\n                    />\r\n                );\r\n                // For route that has suMenu, loop each item and find the exact route\r\n            } else if (prop.subMenu) {\r\n                return (\r\n                    prop.subMenu !== undefined &&\r\n                    prop.subMenu.map((sub, key) => {\r\n                        return (\r\n                            <Route\r\n                                exact\r\n                                path={sub.layout + sub.path}\r\n                                component={sub.component}\r\n                                key={key}\r\n                            />\r\n                        );\r\n                    })\r\n                );\r\n            }\r\n            return <Redirect to=\"/admin/error/404\" key={key} />;\r\n        });\r\n    };\r\n\r\n    toggleCollapsed = () => {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed,\r\n        });\r\n    };\r\n\r\n    getCurrentRouteText = (path: string, thisRoutes: RouteType[]): string => {\r\n        for (let i = 0; i < thisRoutes.length; i += 1) {\r\n            const menu = thisRoutes[i];\r\n            if (path.includes(menu.layout + menu.path) && !menu.subMenu) {\r\n                return menu.name;\r\n            }\r\n            if (menu.subMenu) {\r\n                for (let j = 0; j < menu.subMenu.length; j++) {\r\n                    const subMenu = menu.subMenu[j];\r\n                    if (path === subMenu.layout + subMenu.path) {\r\n                        return subMenu.name;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return \"Brand\";\r\n    };\r\n\r\n    render() {\r\n        const {collapsed} = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <Layout>\r\n                <Layout className=\"site-layout\" style={{ marginLeft: 0, height: '100vw'}}>\r\n                        <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\r\n                            <div style={{ padding: 24, minHeight: 360 }}>\r\n                                <Switch>{this.getRoutes(Routes)}</Switch>\r\n                            </div>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Layouts/Auth.tsx",["82","83"],"import React, { Component } from 'react'\r\nimport {\r\n    Layout\r\n} from 'antd';\r\nimport { Route, Switch, RouteComponentProps } from \"react-router-dom\";\r\nimport Routes from \"../Routes\";\r\nimport { RouteType } from '../Models';\r\nconst { Content } = Layout;\r\n\r\nexport default class AuthLayout extends Component<RouteComponentProps> {\r\n    getRoutes = (layoutRoutes: RouteType[]): null | any => {\r\n        return layoutRoutes.map((prop, key) => {\r\n            if (prop.layout === \"/auth\") {\r\n                return (\r\n                    <Route\r\n                        path={prop.layout + prop.path}\r\n                        component={() => <prop.component/>}\r\n                        key={key}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Layout id=\"auth-layout\">\r\n                <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\r\n                    <Switch>{this.getRoutes(Routes)}</Switch>\r\n                </Content>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Routes.ts",[],[],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Dashboard.tsx",["84","85","86"],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Components/Page404.tsx",["87"],"import React from 'react'\nimport {Link} from \"react-router-dom\"\nimport {\n    Result,\n    Button\n} from \"antd\"\n\nexport default function Page404() {\n    return (\n        <Result\n            status=\"404\"\n            title=\"404 Not Found\"\n            subTitle=\"Sorry, the page you visited does not exist.\"\n            extra={\n                <Link to=\"/admin/index\">\n                    <Button type=\"primary\">Back to Dashboard</Button>\n                </Link>\n            }\n        />\n    )\n}\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/auth.js",["88","89"],"import { credentials } from \"./serverauth\";\n\nexport const remoteUrls = {\n    'eob' : credentials.auth.tokenHost + '/v1/fhir/ExplanationOfBenefit',\n    'patient' : credentials.auth.tokenHost + '/v1/fhir/Patient',\n    'coverage' : credentials.auth.tokenHost + '/v1/fhir/Coverage',\n    'register' : credentials.auth.tokenHost + '/v1/o/applications/register/',\n    'sandbox' : credentials.auth.tokenHost,\n    'tokens' : credentials.auth.tokenHost + '/v1/o/authorized_tokens/'\n};\n\nexport const server = {\n    authorizationEndpoint: \n    `${credentials.auth.tokenHost}${credentials.auth.authorizePath}` +\n        '?response_type=code' +\n        `&client_id=${credentials.client.id}` + \n        '&scope=patient/ExplanationOfBenefit.read' + \n        `&redirect_uri=${credentials.app.redirectPath}`,\n    profileEndpoint: \"https://oauth2.server/api/profile\"\n}\n\nconst storeToken = (obj) => {\n    localStorage.setItem('token', JSON.stringify(obj));\n    setTimeout(() => {\n        const refreshToken = obj.refresh_token;\n        const updated = {...obj, access_token: refreshToken};\n        localStorage.setItem('token', JSON.stringify(updated));\n    }, obj.expires_in * 1000);\n\n    setTimeout(() => {\n        localStorage.removeItem('token');\n        initiateAuthFlow();\n    }, obj.expires_in * 1000 + obj.expires_in * 1000);\n}\n\nconst storeCode = (code) => {\n    localStorage.setItem('authorization_code', code);\n}\n\nexport const getToken = () => {\n    const output = localStorage.getItem('token');\n    return output ? JSON.parse(output) : false;\n}\n\nconst getCode = () => {\n    return localStorage.getItem('authorization_code');\n}\n\n\n// AUTH FUNCTION\nexport default function initiateAuthFlow() {\n\n    // first parse the uri\n    const uriData = {};\n    if (window.location.pathname === '/index.html') {\n        window.location.search.substr(1)\n            .split(\"&\")\n            .forEach(\n                function (item) {\n                    uriData[item.split(\"=\")[0]] = item.split(\"=\")[1]\n                });\n    };\n\n    // store the code if it's in the uri\n    localStorage.removeItem('authorization_code');\n    if (uriData.code){\n        storeCode(uriData.code);\n    };\n\n    const token = getToken();\n    const code = getCode();\n\n    const fetchCodeConditions = !token && !code;\n    const fetchTokenConditions = !token && code;\n\n    // if the token and code aren't there fetch code from user\n    if (fetchCodeConditions) {\n        window.location.href = server.authorizationEndpoint; // go to website\n\n    // get the token with the code\n    } else if (fetchTokenConditions){\n        fetch(`${credentials.auth.tokenHost}${credentials.auth.tokenPath}/`, {\n\t        method: 'POST',\n            body: \n                `client_id=${credentials.client.id}` +\n                `&code=${code}` +\n                '&grant_type=authorization_code' +\n                `&client_secret=${credentials.client.secret}` +\n                `&redirect_uri=${credentials.app.redirectPath}`,\n\t        headers: {\n\t\t        'Content-Type': 'application/x-www-form-urlencoded'\n\t        }\n        })\n        .then(resp => {return resp.json()})\n        .then(data => {\n            // log the token to the token object\n            if (!data.error) {\n                storeToken(data);\n            }\n            else {\n                throw data.error;\n            }})\n        .catch(err => console.log(err));\n        // delete code\n        localStorage.removeItem('authorization_code');\n    }\n};\n\n",[],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/serverauth.js",[],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/getPatientData.js",["90","91","92","93","94","95"],"export const getCurrentPatient = () => {\n    var output = localStorage.getItem('currentPatient');\n    return output;\n};\n\nconst getClaimsPerMonth = () => {\n    let currentPatient = getCurrentPatient() + '::claims_per_month';\n    var output = localStorage.getItem(currentPatient);\n    return output ? JSON.parse(output) : false;\n};\n\nexport const getUpdClaimsPerMonth = () => {\n    let currentPatient = getCurrentPatient() + '::upd_claims_per_month';\n    var output = localStorage.getItem(currentPatient);\n    return output ? JSON.parse(output) : false;\n};\n\nexport const getClaims = () => {\n    let currentPatient = getCurrentPatient() + '::all_claims';\n    var output = localStorage.getItem(currentPatient);\n    return output ? JSON.parse(output) : false;\n};\n\nconst getCosts = (costs, claimType) => {\n    switch (claimType) {\n        case 'CARRIER':\n            var lineTotalCost = costs.filter(i => i['category']['coding'][0]['code'].includes('line_nch_pmt_amt'))[0]['amount']['value'];\n            var lineBenePaid = costs.filter(i => i['category']['coding'][0]['code'].includes('line_bene_ptb_ddctbl_amt'))[0]['amount']['value'];  \n            var lineInsPaid = costs.filter(i => i['category']['coding'][0]['code'].includes('line_prvdr_pmt_amt'))[0]['amount']['value'];   \n            return {'lineTotalCost': lineTotalCost, 'lineCostPaidByYou': lineBenePaid, 'lineCostPaidByInsurance': lineInsPaid}\n        case 'OUTPATIENT':\n            var lineTotalCost = costs.filter(i => i['category']['coding'][0]['code'].includes('rev_cntr_pmt_amt_amt'))[0]['amount']['value'];\n            var lineBenePaid = costs.filter(i => i['category']['coding'][0]['code'].includes('rev_cntr_ptnt_rspnsblty_pm'))[0]['amount']['value'];  \n            var lineInsPaid = costs.filter(i => i['category']['coding'][0]['code'].includes('rev_cntr_prvdr_pmt_amt'))[0]['amount']['value'];\n            return {'lineTotalCost': lineTotalCost, 'lineCostPaidByYou': lineBenePaid, 'lineCostPaidByInsurance': lineInsPaid}\n        default:\n            return {'lineTotalCost': 0, 'lineCostPaidByYou': 0, 'lineCostPaidByInsurance': 0}\n    }\n\n}\n\nconst getServiceType = (li, claimType) => {\n    switch (claimType){\n        case 'CARRIER':\n            var betos = li['extension'].filter(i => i['url'].includes('betos_cd'))[0]['valueCoding'];\n            return {'serviceTypeCode': betos['code'], 'serviceType': betos['display']};\n        case 'OUTPATIENT':\n            var rev = li['revenue']['coding'][0];\n            return {'serviceTypeCode': rev['code'], 'serviceType': rev['display']}\n        case 'INPATIENT':\n            var rev = li['revenue']['coding'][0];\n            return {'serviceTypeCode': rev['code'], 'serviceType': rev['display']}\n        default:\n            return {'serviceTypeCode': null, 'serviceType': null};\n    }\n};\n\nconst getDiagnosis = (e, seq) => {\n    const diags = e['resource']['diagnosis'].filter(i => i['sequence']);\n    const diagnosis = diags.filter(i => i['sequence'] == seq)[0];\n    if (diagnosis) {\n        return diagnosis;\n    }\n    else {\n        return null;\n    }\n};\n\nconst getProcedureCode = (li, claimType, seq, e) => {\n    switch (claimType){\n        case 'CARRIER':\n            return li['service'] ? li['service']['coding'][0]['code']: null;\n        case 'OUTPATIENT':\n            return li['service'] ? li['service']['coding'][0]['code']: null;\n        case 'INPATIENT':\n            if (!e['resource']['procedure']){return null}\n            var codes = e['resource']['procedure'].filter(i => i['sequence'] == seq)\n            if (codes.length != 0){return codes[0]['procedureCodeableConcept']['coding'][0]['code']}\n            else {return null}\n        default:\n            return ''\n    }\n};\n\nexport const makeClaimTableData = (claims) => {\n    const cleanedClaims = claims.map(e => {\n        const header = {\n            // claimId: e['resource']['id'],\n            claimType: e['resource']['type']['coding'].filter(i => i['system'].includes('eob'))[0]['code'],\n            claimStart: e['resource']['billablePeriod']['start'],\n            claimEnd: e['resource']['billablePeriod']['end'],\n            claimTotalPayment: e['resource']['payment']['amount']['value'],\n        };\n        const lines = e['resource']['item'].map(li => {\n            // service type is different for each claim type\n            var serviceType = getServiceType(li, header['claimType']);\n            // var diagnosis = e['resource']['diagnosis'][parseInt(li['sequence']) - 1];\n            var diagnosis = getDiagnosis(e, parseInt(li['sequence']));\n            var costs = li['adjudication'].filter(i => i['amount']);\n\n            // adjudication is different for each claim type\n            var lineCosts = getCosts(costs, header['claimType']);                   \n            var lineMap = {\n                ...header,\n                sequence: li['sequence'],\n                procedureCode: getProcedureCode(li, header['claimType'], li['sequence'], e),\n                // quantity: li['quantity']['value'],\n                serviceStart: li['servicedPeriod'] ? li['servicedPeriod']['start'] : null,\n                // serviceEnd: li['servicedPeriod'] ? li['servicedPeriod']['end'] : null,\n                ...serviceType\n            }\n            if (diagnosis && diagnosis['diagnosisCodeableConcept']['coding'][0]['display']) {\n                diagnosis = diagnosis['diagnosisCodeableConcept']['coding'][0];\n                var diagnosisRenamed = {'diagnosisCode': diagnosis['code'], 'diagnosis': diagnosis['display']};\n            } else {\n                var diagnosisRenamed = {'diagnosisCode': 'N/A', 'diagnosis': 'N/A'};\n            }\n            lineMap = {\n                ...lineMap, \n                ...diagnosisRenamed,\n                ...lineCosts\n            }\n            return lineMap;\n        });\n        return lines; \n    });\n    return Array.from(new Set(cleanedClaims.flat(2)));\n};\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/Statistics.js",["96","97","98","99","100","101","102","103"],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/WelcomeMenu.js",["104"],"import React from 'react';\nimport { Card, Col, Typography } from 'antd';\nconst { Title, Text } = Typography;\n\nexport const WelcomeMenu = () => (\n    <Col span={24}>\n      <Card bordered>\n        <Title level={3}>Welcome to Kimiko</Title>\n        <Text>View your medical claims history.</Text>\n      </Card>\n    </Col>\n);\n\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimsChart.js",["105","106","107","108"],"import React from 'react';\nimport { Card, Col, Typography } from 'antd';\nimport { ClaimSpendStackedBarChart } from './ClaimSpendStackedBarChart.js'\n\nexport const ClaimsChart = ({ claims }) => (\n    <Card bordered >\n      <div style={{ minHeight: \"400px\" }}>\n        <ClaimSpendStackedBarChart data={claims} />\n      </div>\n    </Card>\n)\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimsTable.js",["109","110","111","112","113","114","115","116"],"import React from 'react';\nimport { Card, Col, Typography, Table } from 'antd';\nimport {\n    camelToTitle,\n    numberFormat,\n    boldFormat\n} from './utilities.js';\n\nconst columnWidth = (c) => {\n    const columnWidths = {\n        'lineCostPaidByYou': 60,\n        'lineCostPaidByInsurance': 60,\n        'lineTotalCost': 60,\n        'claimTotalPayment': 60,\n        'claimStart': 100,\n        'claimEnd': 100\n    }\n    return columnWidths[c] ? columnWidths[c]: 89;\n}\n\nconst formatChooser = (column) => {\n    if (column.includes('Cost') || column.includes('Payment')){\n        return 'number'\n    } else if (column.includes('Start') || column.includes('End')){\n        return 'date'\n    } else {\n        return 'string'\n    }\n}\n\nconst sorter = (c) => {\n    const config = {\n        number: (a, b) => a[c] - b[c],\n        string: (a, b) => a[c] > b[c],\n        date: (a, b) => a[c] > b[c],\n    }\n    return config[c];\n}\n\n\nconst columnGenerator = (columnNames, claims) => {\n    return columnNames.map(c => {\n        var colDetails = {\n            key: c,\n            title: camelToTitle(c),\n            dataIndex: c,\n            width: columnWidth(c)\n        }\n\n        // add sorting configuration\n        if (c.includes('Cost') || c.includes('Payment')){\n            colDetails['sorter'] = (a, b) => a[c] - b[c]\n        } else if (c.includes('claimType') || c.includes('Start') || c.includes('End')){\n            colDetails['sorter'] = (a, b) => a[c] > b[c]\n            colDetails['defaultSortOrder'] = 'ascend'\n        }\n\n        // add filter configuration\n        if (c.includes('claimType') || c === 'diagnosis' || c.includes('serviceType')){\n            const values = Array.from(new Set(claims.map(row => row[c])));\n            const filters = values.map(val => {\n                return { text: val, value: val }\n            })\n            colDetails['filters'] = filters;\n            colDetails['onFilter'] = (value, record) => record[c].indexOf(value) === 0\n        }\n        \n        return colDetails;\n    });\n};\n\n\nexport const ClaimsTable = ({ claims }) => {\n    if (claims.length == 0){\n        return null;\n    }\n    return (\n        <Card bordered>\n          <Table\n            size='small'\n            dataSource={claims}\n            columns={columnGenerator(Object.keys(claims[0]), claims)} \n            />\n        </Card>\n    )\n}\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/ClaimSpendStackedBarChart.js",["117","118","119","120","121","122","123","124"],"import * as d3 from \"d3\";\nimport React, { useRef, useEffect } from 'react';\n\nconst width = 1000;\nconst height = 300;\nconst margin = {top: 20, right: 30, bottom: 40, left: 40};\nconst color = \"steelblue\";\n\n\nString.prototype.toProperCase = function () {\n    return this.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n};\nconst removeKey = (propKey, { [propKey]: propValue, ...rest }) => rest;\nconst formatValue = x => isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\");\n\nexport const ClaimSpendStackedBarChart = ({ data }) => {\n    const d3Container = useRef(null);\n\n    useEffect(\n        () => {\n            if (data && d3Container.current) {\n\n                const svg = d3.select(d3Container.current)\n                      .attr(\"viewBox\", [0, 0, width, height]);\n\n                var div = d3.select(\"body\").append(\"div\")\t\n                    .attr(\"class\", \"tooltip\")\t\t\t\t\n                    .style(\"opacity\", 100);\n\n                const x = d3.scaleBand()\n                      .domain(data.map(d => d.date))\n                      .range([margin.left, width - margin.right])\n                      .padding(0.1);\n\n                const columns = Array.from(new Set(data.map(i => Object.keys(removeKey('date', i))).flat(1))).sort();\n                const series = d3.stack()\n                      .keys(columns)(data)\n                      .map(d => (d.forEach(v => v.key = d.key), d));\n\n                const hexCodes = d3.schemeBlues[Math.max(3, series.length)];\n                const colorNames = columns.map(i => i.toProperCase());\n                const colors = colorNames.map(function(e, i) {\n                    return [e, hexCodes[i]];\n                });\n                const color = d3.scaleOrdinal()\n                      .domain(series.map(d => d.key))\n                      .range(hexCodes)\n                      .unknown(\"#ccc\");\n\n                const y = d3.scaleLinear()\n                      .domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).nice()\n                      .range([height - margin.bottom, margin.top]);\n\n                const xAxis = g => g\n                      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                      .call(d3.axisBottom(x).tickSizeOuter(0))\n                      .call(g => g.selectAll(\".domain\").remove());\n                \n                const yAxis = g => g\n                      .attr(\"transform\", `translate(${margin.left},0)`)\n                      .call(d3.axisLeft(y).ticks(null, \"s\"))\n                      .call(g => g.selectAll(\".domain\").remove());\n\n                svg.append(\"g\")\n                    .selectAll(\"g\")\n                    .data(series)\n                    .join(\"g\")\n                    .attr(\"fill\", d => color(d.key))\n                    .selectAll(\"rect\")\n                    .data(d => d)\n                    .join(\"rect\")\n                    .attr(\"x\", (d, i) => x(d.data.date))\n                    .attr(\"y\", d => y(d[1]))\n                    .attr(\"height\", d => y(d[0]) - y(d[1]))\n                    .attr(\"width\", x.bandwidth())\n                    .append(\"title\")\n                    .text(d => `${d.data.date} ${d.key}:  $${formatValue(d.data[d.key])}`);\n\n                svg.append(\"g\")\n                    .call(xAxis)\n                    .selectAll(\"text\")\n                    .attr(\"y\", 0)\n                    .attr(\"x\", 9)\n                    .attr(\"dy\", \"2em\")\n                    .attr(\"transform\", \"rotate(-45)\")\n                    .style(\"text-anchor\", \"end\");\n\n                svg.append(\"g\")\n                    .call(yAxis);\n\n                var legend = svg.append(\"g\")\n                    .attr(\"class\", \"legend\")\n                    .attr(\"height\", 300)\n                    .attr(\"width\", 400)\n                    .attr('transform', 'translate(-50,5)');\n\n                var legendRect = legend.selectAll('rect').data(colors);\n\n                legendRect.enter()\n                    .append(\"rect\")\n                    .attr(\"x\", width - 65)\n                    .attr(\"width\", 10)\n                    .attr(\"height\", 10)\n                    .attr(\"y\", (d, i) => i * 15)\n                    .style(\"fill\", (d, i) => d[1]);\n                \n                var legendText = legend.selectAll('text').data(colors);\n                \n                legendText.enter()\n                    .append(\"text\")\n                    .attr(\"x\", width - 52)\n                    .attr(\"y\", (d, i) => i * 15 + 9)\n                    .text((d, i) => d[0])\n                    .style(\"font-size\", 10);\n                \n            }\n        }, [data, d3Container.current])\n    \n    return (\n        <svg\n          className=\"d3-component\"\n          ref={d3Container}\n          />\n    )\n};\n\n","/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/utilities.js",["125","126","127","128","129","130","131","132","133","134","135","136","137"],"/Users/lpanda/projects/2021_07_pt_data/blue-button/src/Views/Components/EmptyCard.js",["138","139"],{"ruleId":"140","severity":1,"message":"141","line":15,"column":53,"nodeType":"142","messageId":"143","endLine":15,"endColumn":56,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":48,"column":23,"nodeType":"147","messageId":"148","endLine":48,"endColumn":28},{"ruleId":"145","severity":1,"message":"146","line":72,"column":5,"nodeType":"149","messageId":"148","endLine":72,"endColumn":13},{"ruleId":"150","severity":1,"message":"151","line":73,"column":16,"nodeType":"152","messageId":"153","endLine":73,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":11,"column":53,"nodeType":"142","messageId":"143","endLine":11,"endColumn":56,"suggestions":"154"},{"ruleId":"145","severity":1,"message":"146","line":25,"column":5,"nodeType":"149","messageId":"148","endLine":25,"endColumn":13},{"ruleId":"150","severity":1,"message":"155","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":30},{"ruleId":"150","severity":1,"message":"156","line":20,"column":10,"nodeType":"152","messageId":"153","endLine":20,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":23,"column":16,"nodeType":"157","messageId":"148","endLine":23,"endColumn":36},{"ruleId":"145","severity":1,"message":"146","line":8,"column":16,"nodeType":"157","messageId":"148","endLine":8,"endColumn":34},{"ruleId":"145","severity":1,"message":"146","line":40,"column":25,"nodeType":"147","messageId":"148","endLine":40,"endColumn":30},{"ruleId":"145","severity":1,"message":"146","line":51,"column":16,"nodeType":"157","messageId":"148","endLine":51,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":1,"column":34,"nodeType":"147","messageId":"148","endLine":1,"endColumn":39},{"ruleId":"150","severity":1,"message":"158","line":6,"column":7,"nodeType":"152","messageId":"153","endLine":6,"endColumn":24},{"ruleId":"145","severity":1,"message":"146","line":12,"column":37,"nodeType":"147","messageId":"148","endLine":12,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":18,"column":26,"nodeType":"147","messageId":"148","endLine":18,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":85,"column":35,"nodeType":"147","messageId":"148","endLine":85,"endColumn":46},{"ruleId":"145","severity":1,"message":"159","line":85,"column":36,"nodeType":"152","messageId":"160","endLine":85,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":14,"column":32,"nodeType":"147","messageId":"148","endLine":14,"endColumn":46},{"ruleId":"145","severity":1,"message":"161","line":14,"column":33,"nodeType":"162","messageId":"163","endLine":14,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":24,"column":30,"nodeType":"147","messageId":"148","endLine":24,"endColumn":44},{"ruleId":"145","severity":1,"message":"161","line":24,"column":31,"nodeType":"162","messageId":"163","endLine":24,"endColumn":40},{"ruleId":"145","severity":1,"message":"146","line":34,"column":33,"nodeType":"147","messageId":"148","endLine":34,"endColumn":47},{"ruleId":"145","severity":1,"message":"161","line":34,"column":34,"nodeType":"162","messageId":"163","endLine":34,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":44,"column":32,"nodeType":"147","messageId":"148","endLine":44,"endColumn":46},{"ruleId":"145","severity":1,"message":"161","line":44,"column":33,"nodeType":"162","messageId":"163","endLine":44,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":5,"column":28,"nodeType":"147","messageId":"148","endLine":5,"endColumn":33},{"ruleId":"150","severity":1,"message":"164","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"150","severity":1,"message":"165","line":2,"column":21,"nodeType":"152","messageId":"153","endLine":2,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":5,"column":28,"nodeType":"147","messageId":"148","endLine":5,"endColumn":43},{"ruleId":"145","severity":1,"message":"161","line":5,"column":29,"nodeType":"162","messageId":"163","endLine":5,"endColumn":39},{"ruleId":"150","severity":1,"message":"164","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":19},{"ruleId":"150","severity":1,"message":"165","line":2,"column":21,"nodeType":"152","messageId":"153","endLine":2,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":5,"column":5,"nodeType":"152","messageId":"153","endLine":5,"endColumn":17},{"ruleId":"150","severity":1,"message":"167","line":6,"column":5,"nodeType":"152","messageId":"153","endLine":6,"endColumn":15},{"ruleId":"150","severity":1,"message":"168","line":21,"column":7,"nodeType":"152","messageId":"153","endLine":21,"endColumn":20},{"ruleId":"150","severity":1,"message":"169","line":31,"column":7,"nodeType":"152","messageId":"153","endLine":31,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":73,"column":28,"nodeType":"147","messageId":"148","endLine":73,"endColumn":43},{"ruleId":"145","severity":1,"message":"161","line":73,"column":29,"nodeType":"162","messageId":"163","endLine":73,"endColumn":39},{"ruleId":"150","severity":1,"message":"170","line":7,"column":7,"nodeType":"152","messageId":"153","endLine":7,"endColumn":12},{"ruleId":"150","severity":1,"message":"171","line":13,"column":42,"nodeType":"152","messageId":"153","endLine":13,"endColumn":51},{"ruleId":"145","severity":1,"message":"146","line":16,"column":42,"nodeType":"147","messageId":"148","endLine":16,"endColumn":55},{"ruleId":"145","severity":1,"message":"161","line":16,"column":43,"nodeType":"162","messageId":"163","endLine":16,"endColumn":51},{"ruleId":"150","severity":1,"message":"172","line":26,"column":21,"nodeType":"152","messageId":"153","endLine":26,"endColumn":24},{"ruleId":"150","severity":1,"message":"173","line":72,"column":36,"nodeType":"152","messageId":"153","endLine":72,"endColumn":37},{"ruleId":"150","severity":1,"message":"173","line":105,"column":40,"nodeType":"152","messageId":"153","endLine":105,"endColumn":41},{"ruleId":"150","severity":1,"message":"173","line":113,"column":31,"nodeType":"152","messageId":"153","endLine":113,"endColumn":32},{"ruleId":"145","severity":1,"message":"146","line":3,"column":29,"nodeType":"147","messageId":"148","endLine":3,"endColumn":38},{"ruleId":"145","severity":1,"message":"174","line":3,"column":30,"nodeType":"152","messageId":"160","endLine":3,"endColumn":34},{"ruleId":"145","severity":1,"message":"146","line":8,"column":29,"nodeType":"147","messageId":"148","endLine":8,"endColumn":40},{"ruleId":"145","severity":1,"message":"175","line":8,"column":30,"nodeType":"152","messageId":"160","endLine":8,"endColumn":36},{"ruleId":"145","severity":1,"message":"146","line":15,"column":27,"nodeType":"147","messageId":"148","endLine":15,"endColumn":38},{"ruleId":"145","severity":1,"message":"176","line":15,"column":28,"nodeType":"152","messageId":"160","endLine":15,"endColumn":31},{"ruleId":"145","severity":1,"message":"177","line":15,"column":33,"nodeType":"152","messageId":"160","endLine":15,"endColumn":34},{"ruleId":"145","severity":1,"message":"146","line":21,"column":23,"nodeType":"147","messageId":"148","endLine":21,"endColumn":34},{"ruleId":"145","severity":1,"message":"159","line":21,"column":24,"nodeType":"152","messageId":"160","endLine":21,"endColumn":30},{"ruleId":"145","severity":1,"message":"146","line":26,"column":30,"nodeType":"147","messageId":"148","endLine":26,"endColumn":41},{"ruleId":"145","severity":1,"message":"159","line":26,"column":31,"nodeType":"152","messageId":"160","endLine":26,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":37,"column":32,"nodeType":"147","messageId":"148","endLine":37,"endColumn":43},{"ruleId":"145","severity":1,"message":"159","line":37,"column":33,"nodeType":"152","messageId":"160","endLine":37,"endColumn":39},{"ruleId":"150","severity":1,"message":"165","line":2,"column":21,"nodeType":"152","messageId":"153","endLine":2,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":4,"column":26,"nodeType":"147","messageId":"148","endLine":4,"endColumn":31},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["178","179"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionExpression","@typescript-eslint/no-unused-vars","'collapsed' is assigned a value but never used.","Identifier","unusedVar",["180","181"],"'fetchPatientBenefits' is defined but never used.","'EmptyCard' is defined but never used.","FunctionDeclaration","'getClaimsPerMonth' is assigned a value but never used.","Argument 'claims' should be typed.","missingArgType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","'Col' is defined but never used.","'Typography' is defined but never used.","'numberFormat' is defined but never used.","'boldFormat' is defined but never used.","'formatChooser' is assigned a value but never used.","'sorter' is assigned a value but never used.","'color' is assigned a value but never used.","'propValue' is defined but never used.","'div' is assigned a value but never used.","'i' is defined but never used.","Argument 'text' should be typed.","Argument 'number' should be typed.","Argument 'row' should be typed.","Argument 'c' should be typed.",{"messageId":"182","fix":"183","desc":"184"},{"messageId":"185","fix":"186","desc":"187"},{"messageId":"182","fix":"188","desc":"184"},{"messageId":"185","fix":"189","desc":"187"},"suggestUnknown",{"range":"190","text":"191"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"190","text":"192"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"193","text":"191"},{"range":"193","text":"192"},[446,449],"unknown","never",[382,385]]